<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2023-12-17" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2014-04-10" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2014-04-11" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > Web Programming > Web Toolbox 2" />
<meta name="tags" content="project, programming, web, toolbox, context, dialog" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/page-2.css" />
<link rel="stylesheet" href="/inc/context-dialog/context-dialog-1.css" />

<meta name="description" content="The context-dialog component provides basic functions for handling context menus and dialogs in web pages. It shall be usable in SVG documents, therefore it is implemented as non-module script." />

<title>Web Toolbox 2 - Context Dialog</title>
</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>Context Dialog</h1>

<p id="page-abstract"></p>

<p>The component is published in the <tt>Synesis.ContextDialog</tt> namepspace</p>

<p>An Example: <span id="e1" data-contextdialog-id="dialog-001"style="border:1px solid silver">This element</span> has a context dialog assigned. Right-click or long-tap on it to open its context dialog!</p>

<h2 cbc>Overview</h2><div>

<p>Only a few steps are required to implement context dialogs:</p>

<ul>
<li>write the HTML code for the context dialog</li>
<li>create a <tt>dialogClosing</tt> callback function to implement the functionality</li>
<li>register the dialog</li>
<li>associate HTML elements with the dialog</li>
</ul>

<p>There are practically no restrictions on how to create a HTML code for the context dialog. It is usually a container element, such as a <tt>DIV</tt>, <tt>UL</tt>, <tt>OL</tt> or <tt>DL</tt>. The elements within constitute the dialog. An UL element is a good starting point because it provides text and icons out of the box.</p>

<p>A <tt>dialogOpening</tt> callback function, can be passed to the <tt>register( )</tt> function if the event target element must be validated or the dialog must be set up prior to opening, but often can be omitted.</p>

<p>The <tt>dialogClosing</tt> callback function is usually used to evaluate the dialog state and perform the appropriate actions, or prevent the dialog from closing. But a page author can also decide to omit the callback function and register change event handlers directly with dialog elements. More details in the reference section.</p>

<p>To associate an element in the document with a context dialog, an attribute is added to the element and set to the context dialog ID.</p>

<!--h2--Overview--></div>

<h2 cbc>Usage</h2><div>

<p>1. Include the stylesheet document in the HEAD element:</p>
<figcaption class="listing"></figcaption>
<pre>&lt;link rel="stylesheet" href="/inc/context-dialog/<hi>context-dialog-1.css</hi>" /&gt;</pre>

<p>2. Add the HTML code for the dialog at the end of the page. Make sure that the dialog has a unique ID and the classname contains the string "context-dialog":</p>
<figcaption class="listing"></figcaption>
<pre>
&lt;ul id="<hi>dialog-001</hi>" class="<hi>context-dialog</hi>"&gt;
&lt;li&gt;Entry 1&lt;/li&gt;
&lt;li&gt;Entry 2&lt;/li&gt;
&lt;li&gt;Entry 3&lt;/li&gt;
&lt;li&gt;Entry 4&lt;/li&gt;
&lt;/ul&gt;
</pre>

<p>3. Associate the context dialog to existing HTML elements on the page: Add a <tt>data-contextdialog-id</tt> attribute and set the value to the dialog id as defined in the previous step:</p>
<figcaption class="listing"></figcaption>
<pre>&lt;span data-contextdialog-id="<hi>dialog-001</hi>"&gt;THIS ELEMENT&lt;/span&gt; has a context dialog associated</pre>

<p>3. Add the <tt>context-dialog.js</tt> script at the bottom of the page.</p>
<figcaption class="listing"></figcaption>
<pre>&lt;script src="/inc/context-dialog/<hi>context-dialog-1.js</hi>"&lt;/script&gt;</pre>
<p>This script injects the context dialog functions into the <tt>Synesis.ContextDialog</tt> namespace.</p>

<p>5. Register the dialog in the context dialog registry:</p>
<figcaption class="listing"></figcaption>
<pre>
&lt;script type="module"&gt;
Synesis.ContextDialog.register("dialog-001", 
	null, 
	function( ){ console.log( "closing dialog" ) } 
	);
&lt;/script&gt;
</pre>

<p>Both callback function parameters are optional.</p>

<!--h2--Usage--></div>

<h2 cbc>Advanced Usage</h2><div>

<h3 cbc>Context Dialog Close Buttons</h3><div>

<p>By default, a context dialog acts like the familiar context menu, where every click closes the dialog immediatly. But there are scenarios where the user wants to perform multiple interactions with the dialog before closing it. To achieve this behavior, just decorate one or more elements (the close buttons) with the <tt>data-contextdialog-close</tt> attribute. Only a click on these elements will then close the dialog.</p>

<p>Example:</p>

<div data-contextdialog-id="dialog-002" data-contextdialog-parent style="border:1px solid silver ; padding : 5px">
<span id="first-name">John</span><span id="middle-name"> Jacob</span><span id="last-name"> Doe</span><span id="customer-number"> (1234)</span>
</div>

<div id="dialog-002" class="context-dialog">
<div>Show:</div>
<div><input id="first-name" type="checkbox"> <label>First name</label></div>
<div><input id="middle-name" type="checkbox"> <label>Middle name</label></div>
<div><input id="last-name" type="checkbox"> <label>Last name</label></div>
<div><input id="customer-number" type="checkbox"> <label>Customer number</label></div>
<div><button data-contextdialog-close>Cancel</button> <button id="ok" data-contextdialog-close>OK</button></div>
</div>

<script type="module">
Synesis.ContextDialog.register( "dialog-002", 
	evt => {
		const dataPanel = Synesis.ContextDialog.activeParent ;
		const dialog = Synesis.ContextDialog.activeDescriptor.dialog;
		dialog.querySelector( "#first-name" ).checked = dataPanel.querySelector( "#first-name" ).style.display !== "none" ;
		dialog.querySelector( "#middle-name" ).checked = dataPanel.querySelector( "#middle-name" ).style.display !== "none" ;
		dialog.querySelector( "#last-name" ).checked = dataPanel.querySelector( "#last-name" ).style.display !== "none" ;
		dialog.querySelector( "#customer-number" ).checked = dataPanel.querySelector( "#customer-number" ).style.display !== "none" ;
		}, 
	evt => {
		if ( evt.target.id !== "ok" ) return ;
		const dataPanel = Synesis.ContextDialog.activeParent ;
		const dialog = Synesis.ContextDialog.activeDescriptor.dialog;
		dataPanel.querySelector( "#first-name" ).style.display = dialog.querySelector( "#first-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#middle-name" ).style.display = dialog.querySelector( "#middle-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#last-name" ).style.display = dialog.querySelector( "#last-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#customer-number" ).style.display = dialog.querySelector( "#customer-number" ).checked ? "" : "none" ;
	}	) ;
</script>

<p>Right-click or long-tap the data panel, uncheck the fields you want to hide, then click ok to submit the changes.</p>

<h4 cbc="collapsed">Implementation Details</h4><div>

<p>This is the data panel in the document:</p>

<figcaption class="listing">Data panel structure</figcaption>
<pre>
&lt;div data-contextdialog-id="<hi>dialog-002</hi>" <hi>data-contextdialog-parent</hi>&gt;\
&lt;div&gt;
&lt;span id="first-name"&gt;John&lt;/span&gt;
&lt;span id="middle-name"&gt; Jacob&lt;/span&gt;
&lt;span id="last-name"&gt; Doe&lt;/span&gt;
&lt;span id="customer-number"&gt; (1234)&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>This is the context dialog:</p>

<figcaption class="listing">Context dialog structure</figcaption>
<pre>
&lt;div id="<hi>dialog-002</hi>" class="<hi>context-dialog</hi>"&gt;
&lt;div&gt;Show:&lt;/div&gt;
&lt;div&gt;
	&lt;input id="first-name" type="checkbox"&gt; 
	&lt;label&gt;First name&lt;/label&gt;
	&lt;/div&gt;
&lt;div&gt;
	&lt;input id="middle-name" type="checkbox"&gt; 
	&lt;label&gt;Middle name&lt;/label&gt;
	&lt;/div&gt;
&lt;div&gt;
	&lt;input id="last-name" type="checkbox"&gt; 
	&lt;label&gt;Last name&lt;/label&gt;
	&lt;/div&gt;
&lt;div&gt;
	&lt;input id="customer-number" type="checkbox"&gt; 
	&lt;label&gt;Customer number&lt;/label&gt;
	&lt;/div&gt;
&lt;div&gt;
	&lt;button data-contextdialog-close&gt;Cancel&lt;/button&gt; 
	&lt;button id="ok" data-contextdialog-close&gt;OK&lt;/button&gt;
	&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>This is the code that registers the context dialog:</p>

<figcaption class="listing">Registering the context dialog</figcaption>
<pre>
&lt;script type="module"&gt;
Synesis.ContextDialog.register( "dialog-002", 
	evt =&gt; {
		<cc>// dialogOpening callback function</cc>
		<cc>// Find data panel and contex dialog elements</cc>
		const dataPanel = Synesis.ContextDialog.activeParent ;
		const dialog = Synesis.ContextDialog.activeDescriptor.dialog;
		<cc>// Initialize dialog state</cc>
		dialog.querySelector( "#first-name" ).checked 
			= dataPanel.querySelector( "#first-name" ).style.display !== "none" ;
		dialog.querySelector( "#middle-name" ).checked 
			= dataPanel.querySelector( "#middle-name" ).style.display !== "none" ;
		dialog.querySelector( "#last-name" ).checked 
			= dataPanel.querySelector( "#last-name" ).style.display !== "none" ;
		dialog.querySelector( "#customer-number" ).checked 
			= dataPanel.querySelector( "#customer-number" ).style.display !== "none" ;
		}, 
	evt =&gt; {
		<cc>// dialogClosing callback function</cc>
		if ( evt.target.id !== "ok" ) return ;
		<cc>// Find data panel and context dialog</cc>
		const dataPanel = Synesis.ContextDialog.activeParent ;
		const dialog = Synesis.ContextDialog.activeDescriptor.dialog;
		<cc>// Set visibility according to dialog checkbox states</cc>
		dataPanel.querySelector( "#first-name" ).style.display 
			= dialog.querySelector( "#first-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#middle-name" ).style.display 
			= dialog.querySelector( "#middle-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#last-name" ).style.display 
			= dialog.querySelector( "#last-name" ).checked ? "" : "none" ;
		dataPanel.querySelector( "#customer-number" ).style.display 
			= dialog.querySelector( "#customer-number" ).checked ? "" : "none" ;
	}	) ;
&lt;/script&gt;
</pre>

<!--h4--Implementation Deatails--></div>

<!--h3--Context Dialog Close Buttons--></div>

<h3 cbc>Common Parent</h3><div>

<p>The standard scenario defines a <tt>data-contextdialog-id</tt> attribute on every element that is associated with a context menu, which can bloat the HTML code. To reduce that, a <em>common parent element</em> can be decorated with the <tt>data-contextdialog-id</tt> attribute instead, combined with an additional  <tt>data-contextdialog-parent</tt> attribute. The advantage is that only a few elements must be decorated. The drawback is that the context event handler is fired for every element, whether they have an associated context dialog, or not. Therefore, the <tt>onopen</tt> event handler must sort that out and return <tt>false</tt> to prevent the dialog to be openend on unqualified elements.</p>

<figcaption class="listing">A common dialog id parent</figcaption>
<pre>
&lt;div data-contextdialog-id="dialog-003" <hi>data-contextdialog-parent</hi>&gt;
&lt;div&gt;&lt;input type="checkbox"&gt;test&lt;/div&gt;
&lt;div&gt;&lt;input type="checkbox"&gt;test&lt;/div&gt;
&lt;div&gt;&lt;input type="checkbox"&gt;test&lt;/div&gt;
&lt;div&gt;&lt;input type="checkbox"&gt;test&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>The <tt>onopen</tt> event handler checks the event target:</p>

<figcaption class="listing">On open event handler</figcaption>
<pre>
evt => {
	<cc>//	Allow context dialog on input elements only.</cc>
	if ( evt.target.tagName !== "INPUT" ) return false ;
	}
</pre>

<p>The <tt>onclose</tt> event handler implements the functionality:</p>

<figcaption class="listing">On close event handler</figcaption>
<pre>
evt => {
	<cc>//	clear all input states</cc>
	for ( const input of Synesis.ContextDialog.activeParent.querySelectorAll( "input" )) {
		input.checked = false;
	}	}
</pre>

<p>You can try that out live:</p>

<div data-contextdialog-id="dialog-003" data-contextdialog-parent>
<div><input type="checkbox">test</div>
<div><input type="checkbox">test</div>
<div><input type="checkbox">test</div>
<div><input type="checkbox">test</div>
</div>

<p>Check some boxes, then right-click or long-tap one of the checkboxes. Click the <tt>clear</tt> command to reset all checkboxes.</p>

<!--h3--Common Parent--></div>

<!--h2--Advanced Usage--></div>

<h2 cbc>Reference</h2><div>

<h3 cbc>Data Structures</h3><div>

<dl>
<dt><tt>Synesis.ContextDialog.registry</tt></dt><dd>
	<p>An associative list of context dialog descriptors. The key is the ID of the context dialog. The value is an object with the following structure:</p>
	<dl>
	<dt>dialog</dt><dd>References the context dialog element</dd>
	<dt>dialogOpening</dt><dd>Reference to a function that is called before the dialog is opened. The function must return false to prevent opening.</dd>
	<dt>dialogClosing</dt><dd>Reference to a function that is called before the dialog is closed. The function must return <tt>false</tt> to prevent closing.</dd>
	</dl></dd>
<dt><tt>Synesis.ContextDialog.activeDescriptor</tt></dt><dd>Points to the descriptor of the currently open context dialog.</dd>
<dt><tt>Synesis.ContextDialog.activeElement</tt></dt><dd>Points to the element on which the context dialog is shown.</dd>
<dt><tt>	Synesis.ContextDialog.activeParent</tt></dt><dd>Points to the active context parent element if there is one.</dd>
</dl>

<!--h3--Data Structures--></div>

<h3 cbc>register( )</h3><div>

<p>Associates a dialog ID with the dialog element and <tt>dialogOpening</tt> and <tt>dialogClosing</tt> callback functions. Parameters:</p>

<dl>
<dt>dialogid</dt><dd>
	<p>The id of the HTML element that provides the context dialog.</p></dd>
<dt>dialogOpening=null</dt><dd>
	<p>A optional function expression. The function is called before the dialog opens.</p>
	<p>If the function returns <tt>false</tt>, the dialog will not be opened.</p>
	<p>The function can be used to put the dialog in the desired state.</p>
	<p>Parameters:</p>
	<dl style="margin-top:0">
	<dt>dialog</dt><dd>Reference to the context dialog</dd>
	<dt>returns</dt><dd><tt>false</tt> to prevent the dialog from opening</dd>
	</dl></dd>
<dt>dialogClosing=null</dt><dd>
	<p>A optional function expression. The function is called before the dialog closes.</p>
	<p>If the function returns <tt>false</tt>, the dialog will remain open.</p>
	<p>The onclose function implementation usually inspects the dialog state and takes appropriate actions. Alternatively, the page author can decide to attach event handlers directly to the dialog elements and act on events as necessary.</p>
	<p>Parameters:</p>
	<dl style="margin-top:0">
	<dt>event</dt><dd>The contextmenu event that opened the opened the dialog.</dd>
	<dt>dialog</dt><dd>Reference to the context dialog</dd>
	<dt>returns</dt><dd><tt>false</tt> to prevent the dialog from closing</dd>
	</dl>
</dd>
</dl>

<!--h3--register( )--></div>

<h3 cbc="collapsed"><tt>Synesis.ContextDialog.closeContextDialog()</tt></h3><div>

<p>Closes an open context dialog and resets the internal state variables. Used internally.</p>

<!--h3--Synesis.ContextDialog.closeContextDialog--></div>


<h3 cbc>Attributes</h3><div>

<p>The HTML elements of a context dialog can carry attributes that influence behaviour.</p>

<dl>
<dt><tt>data-contextdialog-id</tt></dt>
	<dd>The ID of the associated context dialog.Placed on an element in the document.</dd>
<dt><tt>data-contextdialog-parent</tt></dt>
	<dd>Indicates that the element manages <tt>contextmenu</tt> events of several child elements.</dd>
<dt><tt>ID</tt></dt>
	<dd>Placed on the context dialog element, identifies the context dialog. Also used as key on the context dialog <tt>registry</tt>.</dd>
</dl>

<!--h3--Attributes--></div>

<!--h2--Reference--></div>

<h2 cbc>Architectural Notes</h2><div>

<p>The component publishes names in the <tt>Synesis.ContextDialog</tt> namespace. Only one context dialog can be open at any time.</p>

<!--h2--Architectural Notes--></div>

<h2 cbc>Error Messages</h2><div>

<p>Error messages are printed to the console window. A correct configured page shows neither warnings nor errors.</p>

<!--h2--Error Messages--></div>

</main><footer id="page-footer"></footer>

<ul id="dialog-001" class="context-dialog">
<li>Entry 1</li>
<li>Entry 2</li>
<li>Entry 3</li>
<li>Entry 4</li>
</ul>

<ul id="dialog-003" class="context-dialog">
<li>Clear list state</li>
</ul>

<script type="module" src="/inc/page.js" ></script>
<script type="module" src="/inc/fragment-loader/simple-fragment-loader-2.js"></script>
<script src="/inc/context-dialog/context-dialog-1.js" ></script>

<script type="module">
Synesis.ContextDialog.register( "dialog-001", 
	function( ){ console.log( "opening dialog" ) ; return true }, 
	function( evt ){ alert( `${evt.target.innerText} clicked!` ) ; return true }
	);

Synesis.ContextDialog.register( "dialog-003", 
	evt => {	//	Allow context dialog on input elements only.
		if ( evt.target.tagName !== "INPUT" ) return false } ,
	evt => {	//	clear all input states
		for ( const input of Synesis.ContextDialog.activeParent.querySelectorAll( "input" )) {
			input.checked = false;
			}
		alert("list state cleared!");
		} ) ;
</script>
</body></html>